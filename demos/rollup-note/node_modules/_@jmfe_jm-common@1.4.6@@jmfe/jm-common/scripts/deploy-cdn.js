#!/usr/bin/env node

const pkg = require('../package.json')
const path = require('path')
const archiver = require('archiver')
const UglifyJS = require('uglify-js')
const fs = require('fs-extra')

const version = pkg.version
const name = pkg.name
const shortName = name.match(/^@jmfe\/([\w\-]+)/)[1]

const sourceFile = path.join(__dirname, '../bundle/jm-common.js')
const dest = path.join(__dirname, '../cdn')
const minijsDest = path.join(dest, shortName, version)
fs.ensureDirSync(minijsDest)

const minijs = path.join(minijsDest, shortName + '.js')

function createDestFile() {
  fs.ensureFileSync(minijs)
}

function minifyJS() {
  const code = fs.readFileSync(sourceFile, 'utf8')
  const miniCode = UglifyJS.minify(code).code
  fs.outputFileSync(minijs, miniCode)
}

function zip() {    
  // create a file to stream archive data to.
  var output = fs.createWriteStream(path.join(dest, `${shortName}.zip`))
  var archive = archiver('zip', {
    zlib: { level: 9 } // Sets the compression level.
  })

  // listen for all archive data to be written
  // 'close' event is fired only when a file descriptor is involved
  output.on('close', function() {
    console.log(archive.pointer() + ' total bytes')
    console.log(
      'archiver has been finalized and the output file descriptor has closed.'
    )
  })

  // This event is fired when the data source is drained no matter what was the data source.
  // It is not part of this library but rather from the NodeJS Stream API.
  // @see: https://nodejs.org/api/stream.html#stream_event_end
  output.on('end', function() {
    console.log('Data has been drained')
  })

  // good practice to catch warnings (ie stat failures and other non-blocking errors)
  archive.on('warning', function(err) {
    if (err.code === 'ENOENT') {
      // log warning
    } else {
      // throw error
      throw err
    }
  })

  // good practice to catch this error explicitly
  archive.on('error', function(err) {
    throw err
  })

  // pipe archive data to the file
  archive.pipe(output)
  archive.directory(
      path.join(dest, shortName), 
      shortName
    )
  archive.finalize();
}

function cleanup() {
    fs.emptyDirSync(path.join(dest))
}

cleanup()
createDestFile()
minifyJS()
zip()
